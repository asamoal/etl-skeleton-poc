/*
 * Driver
 * Spark Java Driver Application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.drivers.spark.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Details about resource setup and pipline&#39;s config &amp; implementations
 */
@Schema(name = "ApplicationSuiteModel", description = "Details about resource setup and pipline's config & implementations")
@JsonPropertyOrder({
  ApplicationSuiteModel.JSON_PROPERTY_PIPELINE_ID,
  ApplicationSuiteModel.JSON_PROPERTY_JOB_ID,
  ApplicationSuiteModel.JSON_PROPERTY_RESOURCE,
  ApplicationSuiteModel.JSON_PROPERTY_PIPELINE
})
@JsonTypeName("ApplicationSuiteModel")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen")
@Introspected
public class ApplicationSuiteModel {
    public static final String JSON_PROPERTY_PIPELINE_ID = "pipelineId";
    private Integer pipelineId;

    public static final String JSON_PROPERTY_JOB_ID = "jobId";
    private Integer jobId;

    public static final String JSON_PROPERTY_RESOURCE = "resource";
    private ResourceModel resource;

    public static final String JSON_PROPERTY_PIPELINE = "pipeline";
    private List<PipelineStepModel> pipeline = new ArrayList<>();

    public ApplicationSuiteModel(Integer pipelineId, Integer jobId, ResourceModel resource, List<PipelineStepModel> pipeline) {
        this.pipelineId = pipelineId;
        this.jobId = jobId;
        this.resource = resource;
        this.pipeline = pipeline;
    }

    public ApplicationSuiteModel pipelineId(Integer pipelineId) {
        this.pipelineId = pipelineId;
        return this;
    }

    /**
     * Get pipelineId
     * @return pipelineId
     **/
    @NotNull
    @Schema(name = "pipelineId", required = true)
    @JsonProperty(JSON_PROPERTY_PIPELINE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getPipelineId() {
        return pipelineId;
    }

    @JsonProperty(JSON_PROPERTY_PIPELINE_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPipelineId(Integer pipelineId) {
        this.pipelineId = pipelineId;
    }

    public ApplicationSuiteModel jobId(Integer jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get jobId
     * @return jobId
     **/
    @NotNull
    @Schema(name = "jobId", required = true)
    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getJobId() {
        return jobId;
    }

    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setJobId(Integer jobId) {
        this.jobId = jobId;
    }

    public ApplicationSuiteModel resource(ResourceModel resource) {
        this.resource = resource;
        return this;
    }

    /**
     * Get resource
     * @return resource
     **/
    @Valid
    @NotNull
    @Schema(name = "resource", required = true)
    @JsonProperty(JSON_PROPERTY_RESOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public ResourceModel getResource() {
        return resource;
    }

    @JsonProperty(JSON_PROPERTY_RESOURCE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setResource(ResourceModel resource) {
        this.resource = resource;
    }

    public ApplicationSuiteModel pipeline(List<PipelineStepModel> pipeline) {
        this.pipeline = pipeline;
        return this;
    }

    public ApplicationSuiteModel addPipelineItem(PipelineStepModel pipelineItem) {
        this.pipeline.add(pipelineItem);
        return this;
    }

    /**
     * Get pipeline
     * @return pipeline
     **/
    @NotNull
    @Schema(name = "pipeline", required = true)
    @JsonProperty(JSON_PROPERTY_PIPELINE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public List<PipelineStepModel> getPipeline() {
        return pipeline;
    }

    @JsonProperty(JSON_PROPERTY_PIPELINE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setPipeline(List<PipelineStepModel> pipeline) {
        this.pipeline = pipeline;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationSuiteModel applicationSuiteModel = (ApplicationSuiteModel) o;
        return Objects.equals(this.pipelineId, applicationSuiteModel.pipelineId) &&
            Objects.equals(this.jobId, applicationSuiteModel.jobId) &&
            Objects.equals(this.resource, applicationSuiteModel.resource) &&
            Objects.equals(this.pipeline, applicationSuiteModel.pipeline);
    }

    @Override
    public int hashCode() {
        return Objects.hash(pipelineId, jobId, resource, pipeline);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApplicationSuiteModel {\n");
        sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
        sb.append("    pipeline: ").append(toIndentedString(pipeline)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
