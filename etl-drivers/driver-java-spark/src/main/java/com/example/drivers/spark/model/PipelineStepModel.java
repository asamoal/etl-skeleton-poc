/*
 * Driver
 * Spark Java Driver Application
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.drivers.spark.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import io.micronaut.core.annotation.Introspected;
import io.swagger.v3.oas.annotations.media.Schema;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * PipelineStepModel
 */
@JsonPropertyOrder({
  PipelineStepModel.JSON_PROPERTY_ID,
  PipelineStepModel.JSON_PROPERTY_NAME,
  PipelineStepModel.JSON_PROPERTY_CLASS_PATH,
  PipelineStepModel.JSON_PROPERTY_METHOD_NAME,
  PipelineStepModel.JSON_PROPERTY_CONFIGURATION
})
@JsonTypeName("PipelineStepModel")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen")
@Introspected
public class PipelineStepModel {
    public static final String JSON_PROPERTY_ID = "id";
    private Integer id;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_CLASS_PATH = "classPath";
    private String classPath;

    public static final String JSON_PROPERTY_METHOD_NAME = "methodName";
    private String methodName;

    public static final String JSON_PROPERTY_CONFIGURATION = "configuration";
    private Map<String, String> _configuration = new HashMap<>();

    public PipelineStepModel(Integer id, String name, String classPath, String methodName, Map<String, String> _configuration) {
        this.id = id;
        this.name = name;
        this.classPath = classPath;
        this.methodName = methodName;
        this._configuration = _configuration;
    }

    public PipelineStepModel id(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * @return id
     **/
    @NotNull
    @Schema(name = "id", required = true)
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Integer getId() {
        return id;
    }

    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setId(Integer id) {
        this.id = id;
    }

    public PipelineStepModel name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * @return name
     **/
    @NotNull
    @Schema(name = "name", required = true)
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public PipelineStepModel classPath(String classPath) {
        this.classPath = classPath;
        return this;
    }

    /**
     * Get classPath
     * @return classPath
     **/
    @NotNull
    @Schema(name = "classPath", required = true)
    @JsonProperty(JSON_PROPERTY_CLASS_PATH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getClassPath() {
        return classPath;
    }

    @JsonProperty(JSON_PROPERTY_CLASS_PATH)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setClassPath(String classPath) {
        this.classPath = classPath;
    }

    public PipelineStepModel methodName(String methodName) {
        this.methodName = methodName;
        return this;
    }

    /**
     * Get methodName
     * @return methodName
     **/
    @NotNull
    @Schema(name = "methodName", required = true)
    @JsonProperty(JSON_PROPERTY_METHOD_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getMethodName() {
        return methodName;
    }

    @JsonProperty(JSON_PROPERTY_METHOD_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setMethodName(String methodName) {
        this.methodName = methodName;
    }

    public PipelineStepModel _configuration(Map<String, String> _configuration) {
        this._configuration = _configuration;
        return this;
    }

    public PipelineStepModel putConfigurationItem(String key, String _configurationItem) {
        this._configuration.put(key, _configurationItem);
        return this;
  }

    /**
     * Get _configuration
     * @return _configuration
     **/
    @NotNull
    @Schema(name = "configuration", required = true)
    @JsonProperty(JSON_PROPERTY_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public Map<String, String> getConfiguration() {
        return _configuration;
    }

    @JsonProperty(JSON_PROPERTY_CONFIGURATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setConfiguration(Map<String, String> _configuration) {
        this._configuration = _configuration;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PipelineStepModel pipelineStepModel = (PipelineStepModel) o;
        return Objects.equals(this.id, pipelineStepModel.id) &&
            Objects.equals(this.name, pipelineStepModel.name) &&
            Objects.equals(this.classPath, pipelineStepModel.classPath) &&
            Objects.equals(this.methodName, pipelineStepModel.methodName) &&
            Objects.equals(this._configuration, pipelineStepModel._configuration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, classPath, methodName, _configuration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PipelineStepModel {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    classPath: ").append(toIndentedString(classPath)).append("\n");
        sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
        sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
